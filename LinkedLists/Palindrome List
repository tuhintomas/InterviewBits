Given a singly linked list, determine if its a palindrome. Return 1 or 0 denoting if its a palindrome or not, respectively.

Notes:

Expected solution is linear in time and constant in space.
For example,

List 1-->2-->1 is a palindrome.
List 1-->2-->3 is not a palindrome.





# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
class Solution:
    def middle(self,A):
        slow=A
        fast=A
        while fast and fast.next:
            slow=slow.next
            fast=fast.next.next
        if not fast:
            return slow
        if not fast.next:
            return slow.next
    def reverse(self, A):
            prev = None
            while A:
                next = A.next
                A.next = prev
                prev = A
                A = next
            return prev
    # @param A : head node of linked list
    # @return an integer
    def lPalin(self, A):
        if not A:
            return 1
        mid=self.middle(A)
        B=self.reverse(mid)
        while B:
            if A.val!=B.val:
                return 0
            A=A.next
            B=B.next
        return 1
