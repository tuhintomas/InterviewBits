Given a binary tree, determine if it is height-balanced.

 Height-balanced binary tree : is defined as a binary tree in which the depth of the two subtrees of every node never differ by
 more than 1. 
Return 0 / 1 ( 0 for false, 1 for true ) for this problem

Example :

Input : 
          1
         / \
        2   3

Return : True or 1 

Input 2 : 
         3
        /
       2
      /
     1

Return : False or 0 
         Because for the root node, left subtree has depth 2 and right subtree has depth 0. 
         Difference = 2 > 1. 
         
         
         
         
         
         
         
         
         
class Solution:
    
    # @param A : root node of tree
    # @return an integer
    import math
    def isBalanced(self, A):
        def height(root):
            if root==None:
                return 0
            else:
                l_height=height(root.left)
                r_height=height(root.right)
                return max(l_height,r_height)+1
        if A==None:
            return 1
        elif abs(height(A.left)-height(A.right))>1:
            return 0
        elif self.isBalanced(A.left) and self.isBalanced(A.right):
            return 1
        else:
            return 0
